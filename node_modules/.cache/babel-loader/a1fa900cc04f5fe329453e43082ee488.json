{"ast":null,"code":"import _classCallCheck from \"/home/logesh/cs307/PickaBook/frontend/gui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/logesh/cs307/PickaBook/frontend/gui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/logesh/cs307/PickaBook/frontend/gui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/logesh/cs307/PickaBook/frontend/gui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/logesh/cs307/PickaBook/frontend/gui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/logesh/cs307/PickaBook/frontend/gui/src/components/PwResetNewPw.js\";\nimport React from 'react';\nimport { Form, Input, Icon, Button } from 'antd';\nimport * as actions from '../store/actions/auth';\nimport { connect } from 'react-redux';\nimport { NavLink } from 'react-router-dom';\nimport Logo from '../images/logo.png';\nimport axios from 'axios';\nvar prefixIcon = {\n  color: 'rgba(0,0,0,0.8)'\n};\n\nvar ResetPWForm =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(ResetPWForm, _React$Component);\n\n  function ResetPWForm() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, ResetPWForm);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(ResetPWForm)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      confirmDirty: false,\n      autoCompleteResult: []\n    };\n\n    _this.handleSubmit = function (e) {\n      var uid = _this.props.match.params.uid;\n      var token = _this.props.match.params.token;\n      e.preventDefault();\n\n      _this.props.form.validateFieldsAndScroll(function (err, values) {\n        if (!err) {\n          var postval = {\n            'new_password1': values.password,\n            'new_password2': values.confirm,\n            'uidb64': uid,\n            'token': token\n          };\n          console.log(postval);\n          axios.get(\"http://127.0.0.1:8000/profile/resetpw/confirm/\".concat(uid, \"-\").concat(token, \"/\")).then(function (res) {\n            axios.post(\"http://127.0.0.1:8000/profile/resetpw/confirm/\".concat(uid, \"-set-password/\"), postval).then(function (res) {\n              //this.props.history.push('/login');\n              console.log(res);\n            }).catch(function (error) {\n              return console.log(error);\n            });\n          });\n        } //        this.props.history.push('/');\n\n      });\n    };\n\n    _this.handleConfirmBlur = function (e) {\n      var value = e.target.value;\n\n      _this.setState({\n        confirmDirty: _this.state.confirmDirty || !!value\n      });\n    };\n\n    _this.compareToFirstPassword = function (rule, value, callback) {\n      var form = _this.props.form;\n\n      if (value && value !== form.getFieldValue('password')) {\n        callback('Two passwords that you enter is inconsistent!');\n      } else {\n        callback();\n      }\n    };\n\n    _this.validateToNextPassword = function (rule, value, callback) {\n      var form = _this.props.form;\n\n      if (value && _this.state.confirmDirty) {\n        form.validateFields(['confirm'], {\n          force: true\n        });\n      }\n\n      callback();\n    };\n\n    return _this;\n  }\n\n  _createClass(ResetPWForm, [{\n    key: \"render\",\n    value: function render() {\n      var getFieldDecorator = this.props.form.getFieldDecorator;\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 73\n        },\n        __self: this\n      }, React.createElement(Form, {\n        onSubmit: this.handleSubmit,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 75\n        },\n        __self: this\n      }, React.createElement(Form.Item, {\n        className: \"signForm\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 76\n        },\n        __self: this\n      }, getFieldDecorator('password', {\n        rules: [{\n          required: true,\n          message: 'Please input a new password!'\n        }, {\n          validator: this.validateToNextPassword\n        }]\n      })(React.createElement(Input, {\n        prefix: React.createElement(Icon, {\n          type: \"lock\",\n          style: prefixIcon,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 84\n          },\n          __self: this\n        }),\n        type: \"password\",\n        placeholder: \"Password\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 84\n        },\n        __self: this\n      }))), React.createElement(Form.Item, {\n        className: \"signForm\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 87\n        },\n        __self: this\n      }, getFieldDecorator('confirm', {\n        rules: [{\n          required: true,\n          message: 'Please confirm your password!'\n        }, {\n          validator: this.compareToFirstPassword\n        }]\n      })(React.createElement(Input, {\n        prefix: React.createElement(Icon, {\n          type: \"lock\",\n          style: prefixIcon,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 95\n          },\n          __self: this\n        }),\n        type: \"password\",\n        placeholder: \"Password\",\n        onBlur: this.handleConfirmBlur,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 95\n        },\n        __self: this\n      }))), React.createElement(Form.Item, {\n        className: \"signForm\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 99\n        },\n        __self: this\n      }, React.createElement(Button, {\n        type: \"primary\",\n        htmlType: \"submit\",\n        style: {\n          marginRight: '10px'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 100\n        },\n        __self: this\n      }, \"Signup\"), React.createElement(NavLink, {\n        style: {\n          marginLeft: 110,\n          fontSize: 16\n        },\n        to: \"/login/\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 103\n        },\n        __self: this\n      }, \" Login\"))));\n    }\n  }]);\n\n  return ResetPWForm;\n}(React.Component);\n\nvar WrappedNewPWForm = Form.create({\n  name: 'newPW'\n})(ResetPWForm);\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    loading: state.loading,\n    error: state.error\n  };\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    onAuth: function onAuth(userName, email, password1, password2) {\n      return dispatch(actions.authSignup(userName, email, password1, password2));\n    }\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(WrappedNewPWForm);","map":{"version":3,"sources":["/home/logesh/cs307/PickaBook/frontend/gui/src/components/PwResetNewPw.js"],"names":["React","Form","Input","Icon","Button","actions","connect","NavLink","Logo","axios","prefixIcon","color","ResetPWForm","state","confirmDirty","autoCompleteResult","handleSubmit","e","uid","props","match","params","token","preventDefault","form","validateFieldsAndScroll","err","values","postval","password","confirm","console","log","get","then","res","post","catch","error","handleConfirmBlur","value","target","setState","compareToFirstPassword","rule","callback","getFieldValue","validateToNextPassword","validateFields","force","getFieldDecorator","rules","required","message","validator","marginRight","marginLeft","fontSize","Component","WrappedNewPWForm","create","name","mapStateToProps","loading","mapDispatchToProps","dispatch","onAuth","userName","email","password1","password2","authSignup"],"mappings":"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","sourcesContent":["import React from 'react';\n\nimport { Form, Input, Icon, Button } from 'antd';\nimport * as actions from '../store/actions/auth';\nimport { connect } from 'react-redux';\nimport { NavLink } from 'react-router-dom';\nimport Logo from '../images/logo.png';\nimport axios from 'axios';\n  \nconst prefixIcon = {\n  color: 'rgba(0,0,0,0.8)'\n};\n\n  class ResetPWForm extends React.Component {\n    state = {\n      confirmDirty: false,\n      autoCompleteResult: [],\n    };\n  \n    handleSubmit = (e) => {\n      const uid = this.props.match.params.uid;\n      const token = this.props.match.params.token;\n      e.preventDefault();\n      this.props.form.validateFieldsAndScroll((err, values) => {\n        if (!err) {\n          const postval = {\n            'new_password1': values.password, \n            'new_password2': values.confirm,\n            'uidb64': uid,\n            'token': token\n          };\n          console.log(postval);\n          axios.get(`http://127.0.0.1:8000/profile/resetpw/confirm/${uid}-${token}/`).then(res =>{\n            axios.post(`http://127.0.0.1:8000/profile/resetpw/confirm/${uid}-set-password/`, postval)\n          .then(res =>{\n              //this.props.history.push('/login');\n              console.log(res);\n            })\n            .catch(error => console.log(error))\n          });\n          \n        }\n//        this.props.history.push('/');\n      });\n    }\n  \n    handleConfirmBlur = (e) => {\n      const value = e.target.value;\n      this.setState({ confirmDirty: this.state.confirmDirty || !!value });\n    }\n  \n    compareToFirstPassword = (rule, value, callback) => {\n      const form = this.props.form;\n      if (value && value !== form.getFieldValue('password')) {\n        callback('Two passwords that you enter is inconsistent!');\n      } else {\n        callback();\n      }\n    }\n  \n    validateToNextPassword = (rule, value, callback) => {\n      const form = this.props.form;\n      if (value && this.state.confirmDirty) {\n        form.validateFields(['confirm'], { force: true });\n      }\n      callback();\n    }\n  \n    render() {\n      const { getFieldDecorator } = this.props.form;\n  \n      return (\n        <div>\n\n        <Form onSubmit={this.handleSubmit}>\n          <Form.Item className='signForm' >\n            {getFieldDecorator('password', {\n              rules: [{\n                required: true, message: 'Please input a new password!',\n              }, {\n                validator: this.validateToNextPassword,\n              }],\n            })(\n              <Input prefix={<Icon type=\"lock\" style={prefixIcon} />} type=\"password\" placeholder=\"Password\" />            )}\n          </Form.Item>\n        \n        <Form.Item className='signForm' >\n        {getFieldDecorator('confirm', {\n            rules: [{\n            required: true, message: 'Please confirm your password!',\n            }, {\n            validator: this.compareToFirstPassword,\n            }],\n        })(\n            <Input prefix={<Icon type=\"lock\" style={prefixIcon} />} type=\"password\" placeholder=\"Password\" onBlur={this.handleConfirmBlur} />\n        )}\n        </Form.Item>\n\n        <Form.Item className='signForm' >\n                <Button type=\"primary\" htmlType=\"submit\" style={{marginRight: '10px'}} >\n                    Signup\n                </Button>\n                <NavLink style={{marginLeft: 110, fontSize: 16}} to='/login/'> Login\n                </NavLink>\n        </Form.Item>\n\n       </Form>\n       \n       </div>\n      );\n    }\n  }\n  \n  const WrappedNewPWForm = Form.create({ name: 'newPW' })(ResetPWForm);\n\nconst mapStateToProps = (state) => {\n    return {\n        loading: state.loading,\n        error: state.error\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        onAuth: (userName, email, password1, password2) => dispatch(actions.authSignup(userName, email, password1, password2))\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(WrappedNewPWForm);"]},"metadata":{},"sourceType":"module"}